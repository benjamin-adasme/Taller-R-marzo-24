---
title: "Sesión 1 - Entrando al mundo de R"
subtitle: "Taller introductorio a R"
format: 
  kakashi-revealjs:
    footer: "Introducción a R y Rstudio"
author: Benjamín Adasme
date: last-modified
editor: source
---

## Presentación {.smaller}

::: columns
::: {.column width="60%"}
::: nonincremental
-   Sociólogo egresado de la UCM en 2019
-   Dedicado al análisis de datos cuantitativos desde 2021
-   Formación certificada en R y Rstudio
-   Nerd de R y la estadística
:::
:::

::: {.column width="40%"}
![Quien les habla](foto%20Benjamín%20Adasme%202.jpg)
:::
:::

## Objetivo general {.center}

Introducir R en personas que analicen datos cuantitativos sin lenguajes de programación.

------------------------------------------------------------------------

## Específicos {.smaller}

::: nonincremental
-   Conocer la utilidad de R y las herramientas básicas de R base
-   Conocer tidyverse, para limpieza, manipulación y exploración de datos
-   Repasar estadísticas descriptiva (uni y multivariada) e inferencial.
-   Conocer las herramientas de creación de gráficos en R, específicamente ggplot2 y la gramática de gráficos.
-   Conocer herramientas de presentación de datos como Quarto para la difusión y divulgación.
:::

------------------------------------------------------------------------

## Breve historia {.center}

Comienza su desarrollo en 1993 la U de Auckland. En 1997 sale a la luz en su versión definitiva. Ese mismo año se crea el CRAN que alberga los paquetes y se une al Proyecto GNU de software libre.

Actualmente el desarrollo depende del R Development Core Team.

En 2011 se publica la primera versión de Rstudio, la IDE más popular para trabajar con R.

## ¿Por qué usar R?

::: nonincremental
-   Replicabilidad
-   Eficiencia
-   Control
:::

## R vs el mundo

```{r}
#| echo: false
pacman::p_load(tidyverse, gt)
```

```{r}
#| echo: false
t1 <- readxl::read_xlsx("s01_comparacion.xlsx")

gt(t1) %>% 
  tab_footnote(footnote = "Fuente: Boccardo Bosoni y Ruiz Bruzzone, 2019") %>% 
  tab_header(title = "Comparación de herramientas computacionales estadísticas") %>% 
  tab_options(column_labels.font.weight = "bold") %>% 
  tab_style(locations = cells_body(columns = 1),
            style = cell_text(weight = "bold"))

```

##  {.center}

![Una curva de aprendizaje](1.learning-curve.png)

## Mis expectativas {.smaller}

::: incremental
-   Respeto mutuo y buen trato
-   Disposición al aprendizaje y motivación
-   Espíritu colaborativo y no competitivo
-   Curiosidad
-   Tolerancia a la frustración y al error
:::

# Sesión 1

## ¿Qué es R? {.smaller}


:::nonincremental
-   Lenguaje de programación.
-   No hay botones para hacer las cosas
-   El usuario debe dar las "instrucciones por escrito"
-   Hay más de una forma de hacer las cosas
:::

## {.center}


:::{.fragment}
![Nosotres programando en R por 15 minutos](b0338755257f34868e8809166b7f1836.jpg){width=60%}
:::

# Vamos a R


# Vamos a Rstudio

## Interfaz de Rstudio

![](rstudio-panes-labeled.jpeg){fig-align="center"}

## Elementos de Rstudio {.smaller}

- Consola: inferior izquierda. R puro y duro, donde aparecen los resultados.
- Editor de código: superior izquierda. Donde escribiremos el código de R y otros lenguajes. 
- Ambiente: superior derecha. Almacén de objetos guardados
- Visor: inferior derecha. Visor de archivos, gráficos, paquetes, ayuda, entre otros. 


## Rstudio es como cocinar {.smaller}

- El código escrito en la sección fuente es nuestra receta
- La consola es la olla donde se cocinan los alimentos, de donde salen resultados.
- Los alimentos preparados se albergan en el ambiente, disponibles para que se usen en otra preparación.
- Algunas preparaciones tienen un emplatado especial, y aparecen como imagenes en nuestra pestaña de gráficos. 
- Los archivos son nuestra despensa, los paquetes nuestros implementos de cocina.

## Rstudio es como comer una naranja

![Ya cómete la maldita naranja](abe.jpeg)

## 

Hasta ahora hemos usado R como

- Calculadora

- Operador lógico

## Operadores lógicos

![¿Había una imagen con peor calidad?](operadores.png)


## Sintaxis básica 



`objeto <- función(arg1, arg2, ...)` 

. . . 



```{r}

objeto1 = 2 + 2

```

. . .



¿Cual es el valor de `objeto1`?

. . .


```{r}

objeto1

```
. . . 

Importante que al usar el asignador `<-` ambas partes deben quedar unidas. Usar
` < -` con un espacio entremedio no sirve para asignar.

##

Al asignar nombres a objetos debemos considerar que:

- R es sensible a las mayúsculas y minúsculas.  `f` =/= `F`
- No pueden comenzar con números
- No deben contener espacios. Se debe usar _ como separador 




## Otro ejemplo

```{r}

division <- 43 / 8

division
```
:::{.callout-warning}
## Importante

El punto sirve para indicar decimal, la coma para enumerar elementos. El uso de coma para indicar un decimal en el código generará errores.
:::

## Otro otro ejemplo

```{r}
frutas <- c("manzana", "pera", "naranja")
```

En este caso la `,` sirve para enumerar elementos. 


## Un pequeño detalle

En el código 

```{r}
frutas <- c("manzana", "pera", "naranja")
```

Hay una función que no conocemos...

## {.center}

La función `c()` sirve para combinar elementos en uno solo, creando...

Vectores (que veremos más adelante)

## Clases de objetos en R {.smaller}

- Doble/flotante (*numeric* o *double*): número con decimales (`4.5 , 6.0009`)
- Entero (*integer*): número entero sin decimales (`120, 2L`)
- Cadena (*character*): texto. Se indica usando comillas (`"texto", "lápiz", "23"`)
- Lógico (*logical*): predeterminados. Definen operaciones lógicas (`TRUE`, `FALSE`, `NA`, `NULL`)
- Factor (*factor*): cadenas con un nivel determinado. Útil para variables categóricas. 


## {.center}

La función `class()` nos indica la clase de un objeto
Las funciones `is.[tipo]` son pruebas que definen si un objeto cumple o no con una condición.

```{r}

x = 8

is.numeric(x)


```
```{r}
is.character(x)
```



## {.center}

Veamos algunos ejemplos en R

## Factores

```{r}
#| code-line-numbers: "1|3|5"

genero <- c(1, 3, 2, 3, 1, 2, 2, 3)

genero_fact <- factor(genero, labels = c("Masc", "Fem", "NoBin"))

genero_fact



```
. . .

::: {.callout-note}

## Nota
Al llamar la variable de factor no nos imprime los números, sino que las etiquetas que hemos asignado. Para conocer los niveles asociados podemos usar la función `levels()`
:::


## Pregunta

¿A y B son iguales? ¿Son diferentes? ¿Por qué?

```{r}

A <- 34

B <- "34"

```


## 

La respuesta, en teoría es **NO**, pero ...

. . .

```{r}

A == B

```
¿Por qué sucede?

. . .

Al comparar dos vectores de un solo elemento, R modifica automáticamente uno de los dos a la clase del otro. En este caso, al comparar A igual a B, R transforma B en numérico. Por ello, son iguales. 




# Estructuras de datos

## Vector {.smaller}

- Conjunto de elementos del mismo tipo
- Pueden ser "llamados" por un nombre arbitrario
- Ese nombre representa los valores que contiene en cualquier otro lugar
- Se alberga en el ambiente como cualquier objeto
- Se componen principalmente con la función `c()` que puede significar "combinar" o concatenar"

##

Los vectores se pueden seleccionar con los corchetes `[ ]`

. . .

```{r}
vec1 <- seq(0, 10, by = 2) #secuencia numérica

vec1
```
. . .

```{r}
vec1[1]
```


. . . 

```{r}
vec1[2:3]
```
. . .

```{r}
vec1[vec1 >= 6]

```



## Lista {.smaller}


- Estructura que permite agrupar diversos tipos de datos en un solo objeto.
- Se crean con la función `list()`
- Poco usado pero útil con algunas funciones

. . .

```{r}
lista1 <- list(nombre = "Juan",
               edad = 35,
               intereses = "estadística", "deportes", "música")


lista1["nombre"]

```



## Matriz {.smaller}

- Arreglo de números con una dimensión definida en filas y columnas
- Útil en matemáticas
- Base para el siguiente tipo de estructura

. . .
```{r}
matrix(1:6, nrow = 3, ncol = 2)
```

## Data frame {.smaller}

- El tipo de objeto más común en R.
- Datos en formato tabla. Contiene filas y columnas. 
- Las columnas son vectores. Las filas son observaciones
- Las columnas, por tanto, pueden ser de diferente tipo o clase entre ellas, pero del mismo tipo internamente. 

##

```{r}
df <- data.frame(var1 = 1:4,
                 var2 = c("a", "b", "c", NA),
                 otro_nom = c(TRUE, TRUE, FALSE, TRUE))

rmarkdown::paged_table(df)

```

## {.smaller}

Los data frame también se pueden dividir con los corchetes `[ ]`

Dentro del corchete el primer número representa las filas y el segundo las columnas. 

. . . 

Seleccionamos toda la fila 1. Al dejar vacío después de la coma indicamos que queremos todas las columnas.

```{r}

df[1,]  
```
. . .

Seleccionamos toda la columna 3. Al dejar vacío el número antes de la coma, indicamos todas las filas.

```{r}
df[,3]  
```

. . .

Seleccionamos la fila 4 y la columna 2

```{r}

df[4,2] 

```
##

También podemos seleccionar las variables de un data frame utilizando el signo `$`

```{r}

df$var1

```



O utilizando un doble corchete

```{r}

df[["otro_nom"]]

```
:::{.callout-note}
## Nota
Al usar `$` o `[[ ]]` el botón {{< kbd Tab >}} nos mostrará las variables disponibles.
:::

## Tibble

- Evolución del data frame, pero en el tidyverse (contenido de la próxima sesión)

## {.center}

Apliquemos lo aprendido

# Funciones básicas

## Funciones base vs funciones de paquetes

R como lenguaje se compone de diferentes paquetes. El principal es el paquete "base" que contiene la mayoría de las funciones elementales de R

Más adelante aprenderemos a cargar nuevos paquetes y sumar nuevas funciones.

## Funciones para manejar vectores



```{r}
y <- c(23, 42, -23, 0, 50, -4, 0)

sort(y) #ordena vectores
```
```{r}
rev(y) #Invierte el orden del vector
```


## 

```{r}

z = c("mesa", "silla", "mesa", "plato", "plato")

table(z) #Frecuencias de elementos

```

```{r}
unique(z) #Valores únicos del vector
```


```{r}
length(z) #Cantidad de elementos del vector
```



## Funciones matemáticas básicas



```{r}
sum(y) #Suma de los elementos

```
```{r}

#Mínimo y máximo del vector
min(y)
max(y)
```


##



```{r}

round(4.7863834345, 3)

```


```{r}

sqrt(64)

```

```{r}
log(100, base = 10)
```



## Funciones estadísticas básicas



Promedio o media:

```{r}

mean(y)

```

Mediana

```{r}

median(y)

```

##


Varianza

```{r}
var(y)
```
Desviación típica o estándar

```{r}

sd(y)

```

##

Cuantiles de una distribución numerica

```{r}
quantile(y)
```

Correlación (Pearson)

```{r}
t <- c(6, 7, 1, 3, 9, 1, 1)

cor(t, y)

```
Correlación de Spearman

```{r}

cor(t,y, 
    method = "spearman")

```
##

Generar una distribución normal aleatoria

```{r}
set.seed(123)

rnorm(30)

```
##

```{r}
hist(rnorm(30))
```


## Funciones de data frame

Permiten conocer las dimensiones de un data frame

```{r}
nrow(df)
```

```{r}
ncol(df)
```



```{r}
dim(df)
```
##

`cbind()` une vectores a un data frame

```{r}
vec2 <- c(0, 0, 1, 1)

cbind(df, vec2)

```

##

`rbind()` une una fila de un data frame a otro. Para ello ambos objetos deben tener los mismos nombres de variables y del mismo tipo o clase


```{r}

df_2 <- data.frame(var1 = 5,
                   var2 = "e",
                   otro_nom = FALSE)


rbind(df, df_2)

```

##

La función `head()` nos permite ver las primeras 6 filas de un data frame. Útil para explorar 

```{r}

head(mtcars[,1:10])

```

La función `View()` nos permite ver un data frame en otra pestaña de Rstudio



# Desafío sesión 1


## Primer desafío del curso {.smaller}

:::nonincremental
1. Crear 5 vectores, uno correspondiente cada clase de objetos que revisamos, y guardarlos por separado. Deben tener una longitud mínima de 6 elementos. El nombre de cada objeto debe indicar su clase (ej. vector_numero, obj_log, vcadena, etc. )

2. Usar la función `class()` para comprobar la clase de los 5 vectores.

3. Crear un data frame con los 5 vectores. Calcular las dimensiones del data frame y usar tres funciones estadísticas en alguna de sus variables numéricas. 
:::

# Resumen del día

## ¿Qué aprendimos?


## Cierre 1: configurando Rstudio

![](r+rstudio.jpeg)


## Cierre 2: material complementario

{{< video https://youtu.be/QJCt9GNCD1M?si=_Xr88xzFT68SNDKe width="80%" height="80%" >}}


##

![Cheatsheet de R base](cheatsheet1.png)
